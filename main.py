import asyncio
import logging
import os
import uuid
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import (InlineQuery, InlineQueryResultArticle,
                           InputTextMessageContent, Message)
from dotenv import load_dotenv

load_dotenv()                          # –ü–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
TOKEN = os.getenv("BOT_TOKEN")         # –¢–æ–∫–µ–Ω –±–æ—Ç–∞

# ‚îÄ‚îÄ‚îÄ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)

# ‚îÄ‚îÄ‚îÄ –†–æ—É—Ç–µ—Ä—ã / —Ö—ç–Ω–¥–ª–µ—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
router = Dispatcher()

@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """
    /start ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ–± –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ.
    """
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üîç\n\n"
        "–Ø *Google Search Bot*.\n"
        "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π, –Ω–∞–ø–∏—à–∏ –≤ –ª—é–±–æ–º —á–∞—Ç–µ:\n"
        "`@inlinegooglesearchbot <–≤–∞—à –∑–∞–ø—Ä–æ—Å>`\n\n"
        "–Ø —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–æ–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞. –£–¥–∞—á–∏! ü§ñ",
        parse_mode=ParseMode.MARKDOWN,
    )

@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """
    /help ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Ä–∞–±–æ—Ç–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏.
    """
    await message.answer(
        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º*\n"
        "1. –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å: `@inlinegooglesearchbot –∑–∞–ø—Ä–æ—Å`.\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ‚Äî –æ–Ω –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ —á–∞—Ç.\n\n"
        "–ò—Å—Ö–æ–¥–Ω–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ [GitHub](https://github.com/danosito/inlinegooglesearchbot).\n"
        "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º ‚Äî [@danosito](https://t.me/danosito).",
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
    )

@router.inline_query()
async def inline_query_handler(query: InlineQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–¥–∞—ë–º —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞:
      <arg> 1, <arg> 2, <arg> 3
    """
    text = query.query.strip()
    if not text:
        # Telegram —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–∞–∂–µ –Ω–∞ "–ø—É—Å—Ç–æ–π" –∑–∞–ø—Ä–æ—Å; –æ—Ç–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        await query.answer([], cache_time=1)
        return

    results = [
        InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title=f"{text} {i}",
            description=f"–í–∞—Ä–∏–∞–Ω—Ç {i}",
            input_message_content=InputTextMessageContent(
                message_text=f"{text} {i}"
            ),
        )
        for i in range(1, 4)
    ]

    await query.answer(results, cache_time=1)   # cache_time = 1 ‚Äî —á—Ç–æ–±—ã –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å

# ‚îÄ‚îÄ‚îÄ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    bot = Bot(TOKEN)
    await router.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
